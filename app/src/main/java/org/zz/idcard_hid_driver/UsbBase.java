package org.zz.idcard_hid_driver;

import java.util.HashMap;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.hardware.usb.UsbDevice;
import android.hardware.usb.UsbDeviceConnection;
import android.hardware.usb.UsbEndpoint;
import android.hardware.usb.UsbInterface;
import android.hardware.usb.UsbManager;
import android.os.Handler;
import android.os.Message;
import android.util.Log;

/**
 * @author  chen.gs
 * @version V1.0.0.0 2015-02-10  ???Android USB-Host API	
 * */
public class UsbBase {
	public static final int ERRCODE_SUCCESS	    	=  0;	   //???
	public static final int ERRCODE_NODEVICE		= -100;    //???豸
	public static final int ERRCODE_MEMORY_OVER		= -101;	   //??????????
	public static final int ERRCODE_NO_PERMISION    = -1000;   //????????
	public static final int ERRCODE_NO_CONTEXT      = -1001;   //??Context

	public static final int SHOW_MSG  = 255;                   // ??????????????????
	
	private int m_iSendPackageSize = 0;
	private int m_iRecvPackageSize = 0;
	
	private UsbDevice    m_usbDevice  		     = null;
	private UsbInterface m_usbInterface 		 = null;
	private UsbEndpoint  m_inEndpoint 			 = null;        //????????
	private UsbEndpoint  m_outEndpoint 			 = null;        //д??????
	private UsbDeviceConnection m_connection     = null;
	
	private Context m_ctx          = null;
	private Handler m_fHandler     = null;

	/**
	 * ??	???????
	 * ??	????obj - ?????????
	 * ??	???
	 * */
	public void SendMsg(String obj) {
		if(ConStant.DEBUG)
		{
			Message message = new Message();
			message.what  = ConStant.SHOW_MSG;
			message.obj   = obj;
			message.arg1  = 0;
			if (m_fHandler!=null) {
				m_fHandler.sendMessage(message);	
			}	
		}
	}
	
	/**
	 * ??	?????????
	 * ??	????context - ?????????
	 * ??	???
	 * */
	public UsbBase(Context context){
		m_ctx      = context;
		m_fHandler = null;	
		//??????
		regUsbMonitor();
	}
	
	public UsbBase(Context context, Handler bioHandler){
		m_ctx      = context;
		m_fHandler = bioHandler;	
		//??????
		regUsbMonitor();
	}
		
	/**
	 * ??	???	????VID??PID??????????豸????
	 * ??	????	vid 	- 	VendorId???????
	 * 				pid	-	ProductId???????
	 * ??	???  >=0	-	?豸??????<0	-	???
	 * */
	public int getDevNum(int vid,int pid){
		if(m_ctx == null){
			return ERRCODE_NO_CONTEXT;
		}
		int iDevNum = 0; 
		UsbManager usbManager = (UsbManager)m_ctx.getSystemService(Context.USB_SERVICE);
		HashMap<String, UsbDevice> map = usbManager.getDeviceList();
		for (UsbDevice device : map.values()) {	
			if (usbManager.hasPermission(device)) {
				if ((vid == device.getVendorId()) && (pid==device.getProductId())) {
					iDevNum++;
				}
			}
			else{
				//??????????????????????
				PendingIntent pi = PendingIntent.getBroadcast(m_ctx, 0, new Intent(
						ACTION_USB_PERMISSION), 0);
				// ???????к??????????????????????????????????USB?豸?????
				usbManager.requestPermission(device, pi); 
				return ERRCODE_NO_PERMISION;
			}
		}
		return iDevNum;
	}
	
	/**
	 * ??	???	????VID??PID?????豸 
	 * ??	????	vid - 	VendorId???????
	 * 			pid	-	ProductId???????
	 * ??	???  0	-	?????????	-	???
	 * */
	public int openDev(int vid,int pid){
		if(m_ctx == null){
			return ERRCODE_NO_CONTEXT;
		}
		UsbManager usbManager = (UsbManager)m_ctx.getSystemService(Context.USB_SERVICE);
		HashMap<String, UsbDevice> map = usbManager.getDeviceList();
		for (UsbDevice device : map.values()) {	
			if (usbManager.hasPermission(device)) {
				//SendMsg("++++++++++++++++++++++++++++++++++++++++++++");
				//SendMsg("dName: " + device.getDeviceName());
				//SendMsg("vid: " + device.getVendorId() + "\t pid: "+ device.getProductId());
				if ((vid == device.getVendorId()) && (pid==device.getProductId())) {
					m_usbDevice = device;
					m_usbInterface = m_usbDevice.getInterface(0);
					//USBEndpoint???д???????????
					m_inEndpoint  = m_usbInterface.getEndpoint(0);  //????????
					m_outEndpoint = m_usbInterface.getEndpoint(1);  //д??????
					m_connection  = usbManager.openDevice(m_usbDevice);
					m_connection.claimInterface(m_usbInterface, true);
					m_iSendPackageSize = m_outEndpoint.getMaxPacketSize();
					m_iRecvPackageSize = m_inEndpoint.getMaxPacketSize();
					//SendMsg("-------------------------------------------");
					//SendMsg("SendPackageSize: " + m_iSendPackageSize+",RecvPackageSize: " + m_iRecvPackageSize);
					return 0;
				} else {
					continue;
				}
			}
			else{
				//??????????????????????
				PendingIntent pi = PendingIntent.getBroadcast(m_ctx, 0, new Intent(
						ACTION_USB_PERMISSION), 0);
				// ???????к??????????????????????????????????USB?豸?????
				usbManager.requestPermission(device, pi); 
				return ERRCODE_NO_PERMISION;
			}
		}
		return ERRCODE_NODEVICE;
	}
	
	public int sendPacketSize()
	{
		return m_iSendPackageSize;
	}
	
	public int recvPacketSize()
	{
		return m_iRecvPackageSize;
	}
	
	/**
	 * 	public int bulkTransfer (UsbEndpoint endpoint, byte[] buffer, int length, int timeout)
		??	???	Performs a bulk transaction on the given endpoint. 
				  	The direction of the transfer is determined by the direction of the endpoint
		??	????	endpoint	the endpoint for this transaction
					buffer	buffer for data to send or receive,
					length	the length of the data to send or receive
					timeout	in milliseconds
		??	???	length of data transferred (or zero) for success, or negative value for failure
	 * */
	/**
	 * ??	???	????????
	 * ??	????	bSendBuf 	- 	?????????????
	 * 				iSendLen   -  ?????????????
	 * 				iTimeOut	-	????????λ??????
	 * ??	???  >=0	-	?????????????????????<0	-	???
	 * */
	public int sendData(byte[] bSendBuf,int iSendLen,int iTimeOut){		
		int iRV = -1;
		if (iSendLen > bSendBuf.length) {
			return ERRCODE_MEMORY_OVER;
		}
		int iPackageSize   = sendPacketSize();
		if (iSendLen > iPackageSize) {
			return ERRCODE_MEMORY_OVER;
		}
		
		byte[] bSendBufTmp = new byte[iPackageSize];
		System.arraycopy(bSendBuf, 0, bSendBufTmp, 0,iSendLen);
		//SendMsg("???????????"+zzStringTrans.hex2str(bSendBufTmp));
		iRV = m_connection.bulkTransfer(m_outEndpoint, bSendBufTmp, iPackageSize, iTimeOut);
		//SendMsg("??????????????"+iRV);
		return iRV;
	}
	
	/**
	 * ??	???	????????
	 * ??	????	bRecvBuf 	- 	?????????????
	 * 			iRecvLen    -   ?????????????
	 * 			iTimeOut	-	????????λ??????
	 * ??	???  >=0	-	?????????????????????<0	-	???
	 * */
	public int recvData(byte[] bRecvBuf,int iRecvLen,int iTimeOut){
		int iRV = -1;
		if (iRecvLen > bRecvBuf.length) {
			return ERRCODE_MEMORY_OVER;
		}
		int iPackageSize   = recvPacketSize();
		byte[] bRecvBufTmp = new byte[iPackageSize];
		for (int i=0; i<iRecvLen; i+=iPackageSize)
		{
			int nDataLen = iRecvLen-i;
			if (nDataLen > iPackageSize)
			{
				nDataLen = iPackageSize;
			}
			iRV= m_connection.bulkTransfer(m_inEndpoint, bRecvBufTmp, nDataLen, iTimeOut);
			if(iRV < 0)
			{
				//SendMsg("recvData bulkTransfer iRV="+iRV);
				return iRV;
			}
			System.arraycopy(bRecvBufTmp, 0, bRecvBuf, i,iRV);
		}
		//SendMsg("??????????????"+iRV);
		//SendMsg("???????????"+zzStringTrans.hex2str(bRecvBuf));
		return iRV;
	}
	
	/**
	 * ??	???	????豸
	 * ??	????	
	 * ??	???  0	-	?????????	-	???
	 * */
	public int closeDev(){
		if(m_connection!=null){
			//SendMsg("m_connection.releaseInterface");
			m_connection.releaseInterface(m_usbInterface);
			//SendMsg("m_connection.close");
			m_connection.close();
			m_connection = null;
		}
		return ERRCODE_SUCCESS;
	}
	
	// ???USB?豸????????????????ó?????????????????ɡ?
	// ??????????????????????????????????????requestPermission()?????????????????Intent????
	private static final String ACTION_USB_PERMISSION = "com.android.example.USB_PERMISSION";
	private final BroadcastReceiver mUsbReceiver = new BroadcastReceiver() {
		public void onReceive(Context context, Intent intent) {
			String action = intent.getAction();
			if (ACTION_USB_PERMISSION.equals(action)) {
				synchronized (this) {
					UsbDevice device = (UsbDevice) intent
							.getParcelableExtra(UsbManager.EXTRA_DEVICE);
					if (intent.getBooleanExtra(
							UsbManager.EXTRA_PERMISSION_GRANTED, false)) {
						if (device != null) {
							// call method to set up device communication
						}
					} else {
						Log.d("MIAXIS", "permission denied for device "+ device);
					}
				}
			}
			//???????????豸???????????????????豸????????
			//???????releaseInterface()??close()??????????UseInterface??UsbDeviceConnection
			if (UsbManager.ACTION_USB_DEVICE_DETACHED.equals(action)) {
				UsbDevice device = (UsbDevice) intent
						.getParcelableExtra(UsbManager.EXTRA_DEVICE);
				if (device != null) {
					// call your method that cleans up and closes communication with the device
					m_connection.releaseInterface(m_usbInterface);
					m_connection.close();
				}
			}
		}
	};

	/**
	 * ??	?????????USB????????????????onCreate?У??????????豸???????
	 * ??	????
	 * ??	???
	 * ??	??????USB?豸????????????????ó?????????????????ɡ?
	 *     ????????ó??????Intent????????????????USB?豸??
	 *     ????????????????ó??????Intent?????????????????????
	 *     ???????????ó????????豸?????????????????????
	 *     ???????????????Щ????????????
	 *     ???????ó????о?????????USB?豸??????????е?????豸???????
	 *     ???????????豸????????????????????з????豸??????
	 *     ??????????????????????豸????????????????????????
	 * */
	private void regUsbMonitor()
	{
		IntentFilter filter = new IntentFilter(ACTION_USB_PERMISSION);
		m_ctx.registerReceiver(mUsbReceiver, filter);
	}
}
